<?php

/**
 * Finally, a light, permissions-checking static logging class.
 *
 * This is the version 0.1 KLogger with some static enhance.
 *
 * Usage:
 *  - Check KLogger/example/sKLoggerExample.php and sKLoggerExample2.php
 *
 * @author  Kenny Katzgrau <katzgrau@gmail.com>, Dimitrios Meggidis <tydeas.dr@gmail.com>
 * @since   January 14, 2010
 * @link    http://codefury.net <Kenny Katzgray>
 *          http://github.com/dmtrs <Dimitrios Meggidis>
 * @version 0.2
 */

/**
 * Class documentation
 */
class sKLogger
{
    /**
     * Error severity, from low to high. From BSD syslog RFC, secion 4.1.1
     * @link http://www.faqs.org/rfcs/rfc3164.html
     */
    const EMERG  = 0;  // Emergency: system is unusable
    const ALERT  = 1;  // Alert: action must be taken immediately
    const CRIT   = 2;  // Critical: critical conditions
    const ERR    = 3;  // Error: error conditions
    const WARN   = 4;  // Warning: warning conditions
    const NOTICE = 5;  // Notice: normal but significant condition
    const INFO   = 6;  // Informational: informational messages
    const DEBUG  = 7;  // Debug: debug messages
    //custom logging level
    /**
     * Log nothing at all
     */
    const OFF    = 8;
    /**
     * Alias for CRIT
     * @deprecated
     */
    const FATAL  = 2;

    /**
     * Internal status codes
     */
    const STATUS_LOG_OPEN    = 1;
    const STATUS_OPEN_FAILED = 2;
    const STATUS_LOG_CLOSED  = 3;

    /**
     * An array of the severity messages, is used in the _getStatus
     * instead of the switch case.
     * @var Array
     */
    private static $_sMessages = array( "EMERG", "ALERT", "CRIT", "ERR", "WARN", "NOTICE", "INFO" , "DEBUG");
    /**
     * Current status of the log file
     * @var integer
     */
    private static $_logStatus         = self::STATUS_LOG_CLOSED;
    /**
     * Holds messages generated by the class
     * @var array
     */
    private $_messageQueue      = array();
    /**
     * Path to the log file
     * @var string
     */
    private $_logFilePath       = null;
    /**
     * Current minimum logging threshold
     * @var integer
     */
    private static $_severityThreshold = self::INFO;
    /**
     * This holds the file handle for this instance's log file
     * @var resource
     */
    private $_fileHandle        = null;

    /**
     * Standard messages produced by the class. Can be modified for il8n
     * @var array
     */
    private $_messages = array(
        //'writefail'   => 'The file exists, but could not be opened for writing. Check that appropriate permissions have been set.',
        'writefail'   => 'The file could not be written to. Check that appropriate permissions have been set.',
        'opensuccess' => 'The log file was opened successfully.',
        'openfail'    => 'The file could not be opened. Check permissions.',
    );

    /**
     * Default severity of log messages, if not specified
     * @var integer
     */
    private static $_defaultSeverity    = self::DEBUG;
    /**
     * Date format string for use to the log timestamps
     * @var string
     */
    private static $_dateF         = 'Y-m-d'; 
    /**
     * Date format string for use to the log timestamps
     * @var string
     */
    private static $_timeF         = 'G:i:s'; 
    /**
     * Valid PHP date() format string for log timestamps
     * @var string
     */
    private static $_dateFormat         = 'Y-m-d G:i:s';
    /**
     * Octal notation for default permissions of the log file
     * @var integer
     */
    private static $_defaultPermissions = 0777;
    /**
     * Array of sKLogger instances, part of Singleton pattern
     * @var array
     */
    private static $instances           = array();
    /**
     * If $_SERVER['REMOTE_ADDR'] will be displayed in log
     * @var boolean
     */
    private static $_ip			= true;
    /**
     * A valid sprintf string to use as a display format
     * We assume the ip is set to be display and we have:
     *   1-> datetime
     *   2-> severity 
     *   3-> ip
     * @var stirng
     */
    private static $_messageFormat 	= '[ %1$s ][ %3$s ][ %2$s ]'; 
    /**
     * Partially implements the Singleton pattern. Each $logDirectory gets one
     * instance.
     *
     * @param string  $logDirectory File path to the logging directory
     * @param integer $severity     One of the pre-defined severity constants
     * @return sKLogger
     */
    public static function instance($logDirectory = null, $severity = null)
    {
        if (!isset($severity)) {
            $severity = self::$_defaultSeverity;
        }
        
        if (!isset($logDirectory)) {
            if (count(self::$instances) > 0) {
                return current(self::$instances);
            } else {
                $logDirectory = dirname(__FILE__);
            }
        }

        if (in_array($logDirectory, self::$instances)) {
            return self::$instances[$logDirectory];
        }

        self::$instances[$logDirectory] = new self($logDirectory, $severity);

        return self::$instances[$logDirectory];
    }

    /**
     * Class constructor
     *
     * @param string  $logDirectory File path to the logging directory
     * @param integer $severity     One of the pre-defined severity constants
     * @return void
     */
    private function __construct($logDirectory, $severity)
    {
        $logDirectory = rtrim($logDirectory, '\\/');

        if ($severity === self::OFF) {
            return;
        }

        $this->_logFilePath = $logDirectory
            . DIRECTORY_SEPARATOR
            . 'log_'
            . date(self::$_dateF)
            . '.txt';

        $this->_severityThreshold = $severity;
        if (!file_exists($logDirectory)) {
            mkdir($logDirectory, self::$_defaultPermissions, true);
        }

        if (file_exists($this->_logFilePath) && !is_writable($this->_logFilePath)) {
            $this->_logStatus = self::STATUS_OPEN_FAILED;
            $this->_messageQueue[] = $this->_messages['writefail'];
            return;
        }

        if (($this->_fileHandle = fopen($this->_logFilePath, 'a'))) {
            $this->_logStatus = self::STATUS_LOG_OPEN;
            $this->_messageQueue[] = $this->_messages['opensuccess'];
        } else {
            $this->_logStatus = self::STATUS_OPEN_FAILED;
            $this->_messageQueue[] = $this->_messages['openfail'];
        }
    }

    /**
     * Class destructor
     */
    public function __destruct()
    {
        if ($this->_fileHandle) {
            fclose($this->_fileHandle);
        }
    }
    /**
     * Writes a $line to the log with a severity level of DEBUG
     *
     * @param string $line Information to log
     * @return void
     */
    public function logDebug($line)
    {
        $this->log($line, self::DEBUG);
    }

    /**
     * Returns (and removes) the last message from the queue.
     * @return string
     */
    public function getMessage()
    {
        return array_pop($this->_messageQueue);
    }

    /**
     * Returns the entire message queue (leaving it intact)
     * @return array
     */
    public function getMessages()
    {
        return $this->_messageQueue;
    }

    /**
     * Empties the message queue
     * @return void
     */
    public function clearMessages()
    {
        $this->_messageQueue = array();
    }

    /**
     * Sets the date format used by all instances of sKLogger
     * If the second param $timeF is not set then only the
     * the first param will be used.
     * 
     * --- This function will may have issues ---
     * 
     * @param string $dateF Valid format string for date()
     *               describing only the date part.
     * @param string $timeF Valid format string for date()
     *		     describin only the time part.
     */
    public static function setDateFormat($dateF, $timeF = null)
    {
        if(isset($timeF)) {
            self::$_dateF = $dateF;
            self::$_timeF = $timeF;
            self::$_dateFormat = self::$_dateF." ".self::$_timeF;
        } else {
            self::$_dateFormat = $dateF;
        }
    }
    public static function setDisplayIp($bool)
    {
        if (is_bool($bool)) self::$_ip = $bool;
    }
    public static function setDisplayFormat($format)
    {
        if(preg_match('/%(?:\d+\$)?[dfsu]/',$format )) {
            self::$_messageFormat = $format;
        }
    }
    /**
     * Writes a $line to the log with a severity level of INFO. Any information
     * can be used here, or it could be used with E_STRICT errors
     *
     * @param string $line Information to log
     * @return void
     */
    public function logInfo($line)
    {
        self::log($line, self::INFO);
    }

    /**
     * Writes a $line to the log with a severity level of NOTICE. Generally
     * corresponds to E_STRICT, E_NOTICE, or E_USER_NOTICE errors
     *
     * @param string $line Information to log
     * @return void
     */
    public function logNotice($line)
    {
        self::log($line, self::NOTICE);
    }

    /**
     * Writes a $line to the log with a severity level of WARN. Generally
     * corresponds to E_WARNING, E_USER_WARNING, E_CORE_WARNING, or 
     * E_COMPILE_WARNING
     *
     * @param string $line Information to log
     * @return void
     */
    public function logWarn($line)
    {
        self::log($line, self::WARN);
    }

    /**
     * Writes a $line to the log with a severity level of ERR. Most likely used
     * with E_RECOVERABLE_ERROR
     *
     * @param string $line Information to log
     * @return void
     */
    public function logError($line)
    {
        self::log($line, self::ERR);
    }

    /**
     * Writes a $line to the log with a severity level of FATAL. Generally
     * corresponds to E_ERROR, E_USER_ERROR, E_CORE_ERROR, or E_COMPILE_ERROR
     *
     * @param string $line Information to log
     * @return void
     * @deprecated Use logCrit
     */
    public function logFatal($line)
    {
        self::log($line, self::FATAL);
    }

    /**
     * Writes a $line to the log with a severity level of ALERT.
     *
     * @param string $line Information to log
     * @return void
     */
    public function logAlert($line)
    {
        self::log($line, self::ALERT);
    }

    /**
     * Writes a $line to the log with a severity level of CRIT.
     *
     * @param string $line Information to log
     * @return void
     */
    public function logCrit($line)
    {
        self::log($line, self::CRIT);
    }

    /**
     * Writes a $line to the log with a severity level of EMERG.
     *
     * @param string $line Information to log
     * @return void
     */
    public function logEmerg($line)
    {
        self::log($line, self::EMERG);
    }

    /**
     * Writes a $line to the log with the given severity
     *
     * @param string  $line     Text to add to the log
     * @param integer $severity Severity level of log message (use constants)
     */
    public function log($line, $severity)
    {
        $inst = self::instance(null, $severity);
        if ($inst->_severityThreshold >= $severity) {
            $status = $inst->_getStatus($severity);
            $inst->writeFreeFormLine("$status $line \n");
        }
    }

    /**
     * Writes a line to the log without prepending a status or timestamp
     *
     * @param string $line Line to write to the log
     * @return void
     */
    public function writeFreeFormLine($line)
    {
        if ($this->_logStatus == self::STATUS_LOG_OPEN
            && $this->_severityThreshold != self::OFF) {
            if (fwrite($this->_fileHandle, $line) === false) {
                $this->_messageQueue[] = $this->_messages['writefail'];
            }
        }
    }

    private function _getStatus($level)
    {
        $ip = '';
        $severity = 'LOG';
        $time = date(self::$_dateFormat);
        if(self::$_ip && isset($_SERVER['REMOTE_ADDR'])) {
            $ip = $_SERVER['REMOTE_ADDR'];
        }
        if(isset(self::$_sMessages[$level])) {
            $severity = self::$_sMessages[$level];
        }
	return sprintf(self::$_messageFormat, $time, $severity, $ip);
    }
}
