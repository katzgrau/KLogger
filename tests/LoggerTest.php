<?php

use Katzgrau\KLogger\Logger;
use Psr\Log\LogLevel;

class LoggerTest extends PHPUnit_Framework_TestCase
{
    private $logPath;

    private $logger;
    private $errLogger;
    private $hostNameLogger;
    private $appNameLogger;

    /**
     * Initiates a couple different loggers for subsequent tests.
     */
    public function setUp()
    {
        $this->logPath = __DIR__.'/logs';
        $this->logger = new Logger($this->logPath, LogLevel::DEBUG, array ('flushFrequency' => 1));
        $this->errLogger = new Logger($this->logPath, LogLevel::ERROR, array (
            'extension' => 'log',
            'prefix' => 'error_',
            'flushFrequency' => 1
        ));
        $this->hostNameLogger = new Logger($this->logPath, LogLevel::DEBUG, array (
            'hostname' => gethostname(),
            'extension' => 'log',
            'prefix' => 'hostname_logger_'
        ));
        $this->appNameLogger = new Logger($this->logPath, LogLevel::DEBUG, array (
            'appname' => 'LoggerTEst',
            'extension' => 'log',
            'prefix' => 'appname_logger_'
        ));
    }

    /**
     * Test if Klogger implements Psr LoggerInterface.
     */
    public function testImplementsPsr3LoggerInterface()
    {
        $this->assertInstanceOf('Psr\Log\LoggerInterface', $this->logger);
    }

    /**
     * Test if KLogger accepts custom extension in $options array.
     */
    public function testAcceptsExtension()
    {
        $this->assertStringEndsWith('.log', $this->errLogger->getLogFilePath());
    }

    /**
     * Test if KLogger accepts custom prefixes in $options array.
     */
    public function testAcceptsPrefix()
    {
        $filename = basename($this->errLogger->getLogFilePath());
        $this->assertStringStartsWith('error_', $filename);
    }

    /**
     * Test if KLogger accepts hostname in $options array.
     */
    public function testGetHostname()
    {
        $this->assertNull($this->logger->getHostname());
        $this->assertNotNull($this->hostNameLogger->getHostname());
    }

    /**
     * Test if KLogger accepts appname in $options array.
     */
    public function testGetAppName()
    {
        $this->assertNull($this->logger->getAppName());
        $this->assertNotNull($this->appNameLogger->getAppName());
    }

    /**
     * Test if KLogger can write basic logs by checking that a file gets created and a logline gets added.
     */
    public function testWritesBasicLogs()
    {
        $this->logger->log(LogLevel::DEBUG, 'This is a test for a plain logger');
        $this->errLogger->log(LogLevel::ERROR, 'This is a test for the ERROR logger');
        $this->hostNameLogger->log(LogLevel::DEBUG, 'This is a test for the hostname logger');
        $this->appNameLogger->log(LogLevel::DEBUG, 'This is a test for the appname logger');

        $this->assertTrue(file_exists($this->logger->getLogFilePath()));
        $this->assertTrue(file_exists($this->errLogger->getLogFilePath()));
        $this->assertTrue(file_exists($this->hostNameLogger->getLogFilePath()));
        $this->assertTrue(file_exists($this->appNameLogger->getLogFilePath()));

        $this->assertLastLineEquals($this->logger);
        $this->assertLastLineEquals($this->errLogger);
        $this->assertLastLineEquals($this->hostNameLogger);
        $this->assertLastLineEquals($this->appNameLogger);
    }

    /**
     * Test to compare that the KLogger getLastLine function call and the actual LastLine in the logfile are equal.
     *
     * @param Logger $logr
     */
    public function assertLastLineEquals(Logger $logr)
    {
        $this->assertEquals($logr->getLastLogLine(), $this->getLastLine($logr->getLogFilePath()));
    }

    /**
     * Test to compare the KLogger getLastLine function call and that it does not equal the actual LastLine in the logfile.
     * __UNUSED__
     *
     * @param Logger $logr
     */
    public function assertLastLineNotEquals(Logger $logr)
    {
        $this->assertNotEquals($logr->getLastLogLine(), $this->getLastLine($logr->getLogFilePath()));
    }

    /**
     * Get the LastLine from the logfile. 
     * 
     * @param $filename
     *
     * @return string
     */
    private function getLastLine($filename)
    {
        $fp = fopen($filename, 'r');
        $pos = -2; // start from second to last char
        $t = ' ';

        while ($t != "\n") {
            fseek($fp, $pos, SEEK_END);
            $t = fgetc($fp);
            $pos = $pos - 1;
        }

        $t = fgets($fp);
        fclose($fp);

        return trim($t);
    }

    /**
     * Remove the files that are generated by LoggerTest
     * __UNUSED__
     */
    public function tearDown() {
        #@unlink($this->logger->getLogFilePath());
        #@unlink($this->errLogger->getLogFilePath());
        #@unlink($this->hostNameLogger->getLogFilePath());
        #@unlink($this->appNameLogger->getLogFilePath());
    }
}
